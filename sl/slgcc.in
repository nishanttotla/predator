#!/bin/bash
export SELF="$0"

# this makes 7x speedup in case 'grep' was compiled with multi-byte support
export LC_ALL=C

export CCACHE_DISABLE=1

usage() {
    echo Usage: $0 GCC_ARGS
    exit 1
}

seek_input_file() {
    for i in "$@"; do
        test -e "$i" && return 0
    done

    return 1
}

seek_input_file "$@" || usage

# include common code base
# FIXME: 'readlink -f' does not work on Darwin
topdir="`dirname "$(python -c "import os; print os.path.abspath('$SELF')")"`/.."
source "$topdir/build-aux/xgcclib.sh"

# basic setup
export SINK="/dev/null"
export GCC_PLUG='@GCC_PLUG@'
export GCC_HOST='@GCC_HOST@'
export GCC_OPTS="-S -o $SINK -O0 -I$topdir/include/predator-builtins -DPREDATOR"

# initial checks
find_gcc_host
find_gcc_plug sl Predator

# use chromium as default SVG_VIEWER
test -z "$SVG_VIEWER" && SVG_VIEWER=chromium

if test x1 = "x$SL_PLOT"; then
    # wipe all .dot and .svg
    rm -f *.dot *.svg
fi

pidfile="$(mktemp /tmp/slgcc.XXXXXX)"
test -w "$pidfile" || die "mktemp failed"
export pidfile
trap "rm -f '$pidfile'" EXIT

# check whether stdout is connected to a terminal
if tty 0>&1 >"$SINK"; then
    # initialize coloring escape sequences
    export S='\o033[1;30m'
    export R='\o033[1;31m'
    export G='\o033[1;32m'
    export Y='\o033[1;33m'
    export B='\o033[1;34m'
    export W='\o033[1;37m'
    export N='\o033[0m'
fi

# run the gcc
run_gcc() {
    printf "Trying to compile \033[1;37m%s\033[0m ... " "$*" >&2
    tmp="$(mktemp /tmp/slgcc.XXXXXX)"
    test -w "$tmp" || die "mktemp failed"
    trap "rm -f '$tmp'" RETURN

    if "$GCC_HOST" $GCC_OPTS "$@" > "$tmp" 2>&1; then
        printf "\033[1;32mOK\033[0m\n" >&2
        cat "$tmp" >&2
        printf "Running \033[1;34mPredator\033[0m ...\n" >&2
    else
        printf "\033[1;31mFAILED\033[0m\n\n" >&2
        cat "$tmp"
        return 1
    fi

    # FIXME: 'stdbuf' is not available on Darwin
    "$GCC_HOST" $GCC_OPTS                                           \
        -fplugin="$GCC_PLUG" -fplugin-arg-libsl-pid-file="$pidfile" \
        -fplugin-arg-libsl-args=error_label:ERROR $SL_OPTS "$@"     \
        3>&1 1>&2 2>&3 | grep -E                  \
        ' \[-fplugin=libsl\.so\]$|CL_BREAK_IF|INT3|SIGTRAP|internal compiler error|undefined symbol'
    if [ $? -ne 0 ]; then
        printf "\033[1;31mFAILED\033[0m\n" >&2
    fi
}

forward_signal() {
    cc_pid="$(<$pidfile)"
    test 0 -le "$cc_pid" || die "invalid pidfile"
    kill "-$1" "$cc_pid"
    wait
}

# colorize the output
# FIXME: 'stdbuf' is not available on Darwin
# FIXME: 'sed -r' does not work on Darwin
run_gcc "$@" &

# redirect terminating signals to our plug-in
trap "forward_signal SIGTERM" SIGTERM
trap "forward_signal SIGINT"  SIGINT
wait

if test x1 = "x$SL_PLOT"; then
    # visualize graphs
    printf "graph visualization in progress ... "
    make $MAKEOPTS -s -f "$topdir/tests/predator-regre/Makefile.in" \
        TIMEOUT="timeout 2" || exit $?
    printf "done\n"
    "$SVG_VIEWER" *.svg 2>/dev/null &
fi
